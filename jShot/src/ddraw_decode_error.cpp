#include <unordered_map>

#include "ddraw_decode_error.h"


std::string decodeCreateSurfaceError(HRESULT _hResult)
{
	static std::unordered_map<HRESULT, std::string> g_CreateSurfaceErrors = 
	{
		{ DDERR_INCOMPATIBLEPRIMARY, "DDERR_INCOMPATIBLEPRIMARY" },
		{ DDERR_INVALIDCAPS, "DDERR_INVALIDCAPS" },
		{ DDERR_INVALIDOBJECT, "DDERR_INVALIDOBJECT" },
		{ DDERR_INVALIDPARAMS, "DDERR_INVALIDPARAMS" },
		{ DDERR_INVALIDPIXELFORMAT, "DDERR_INVALIDPIXELFORMAT" },
		{ DDERR_NOALPHAHW, "DDERR_NOALPHAHW" },
		{ DDERR_NOCOOPERATIVELEVELSET, "DDERR_NOCOOPERATIVELEVELSET" },
		{ DDERR_NODIRECTDRAWHW, "DDERR_NODIRECTDRAWHW" },
		{ DDERR_NOEMULATION, "DDERR_NOEMULATION" },
		{ DDERR_NOEXCLUSIVEMODE, "DDERR_NOEXCLUSIVEMODE" },
		{ DDERR_NOFLIPHW, "DDERR_NOFLIPHW" },
		{ DDERR_NOMIPMAPHW, "DDERR_NOMIPMAPHW" },
		{ DDERR_NOOVERLAYHW, "DDERR_NOOVERLAYHW" },
		{ DDERR_NOZBUFFERHW, "DDERR_NOZBUFFERHW" },
		{ DDERR_OUTOFMEMORY, "DDERR_OUTOFMEMORY" },
		{ DDERR_OUTOFVIDEOMEMORY, "DDERR_OUTOFVIDEOMEMORY" },
		{ DDERR_PRIMARYSURFACEALREADYEXISTS, "DDERR_PRIMARYSURFACEALREADYEXISTS" },
		{ DDERR_UNSUPPORTEDMODE, "DDERR_UNSUPPORTEDMODE" }
	};

	auto it = g_CreateSurfaceErrors.find(_hResult);
	if (it != g_CreateSurfaceErrors.end())
	{
		return it->second;
	}

	return std::string("Unknown error");
}